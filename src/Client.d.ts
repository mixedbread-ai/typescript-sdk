/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as MixedbreadAiApi from "./api";
export declare namespace MixedbreadAiApiClient {
    interface Options {
        environment?: core.Supplier<environments.MixedbreadAiApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class MixedbreadAiApiClient {
    protected readonly _options: MixedbreadAiApiClient.Options;
    constructor(_options: MixedbreadAiApiClient.Options);
    /**
     * Create embeddings for text or images using the specified model, encoding format, and normalization.
     * @throws {@link MixedbreadAiApi.BadRequestError}
     * @throws {@link MixedbreadAiApi.UnauthorizedError}
     * @throws {@link MixedbreadAiApi.ForbiddenError}
     * @throws {@link MixedbreadAiApi.NotFoundError}
     * @throws {@link MixedbreadAiApi.UnprocessableEntityError}
     * @throws {@link MixedbreadAiApi.TooManyRequestsError}
     * @throws {@link MixedbreadAiApi.InternalServerError}
     *
     * @example
     *     await mixedbreadAiApi.embeddings({
     *         model: "model"
     *     })
     */
    embeddings(request: MixedbreadAiApi.EmbeddingsRequest, requestOptions?: MixedbreadAiApiClient.RequestOptions): Promise<MixedbreadAiApi.EmbeddingsResponse>;
    /**
     * @throws {@link MixedbreadAiApi.BadRequestError}
     * @throws {@link MixedbreadAiApi.UnauthorizedError}
     * @throws {@link MixedbreadAiApi.ForbiddenError}
     * @throws {@link MixedbreadAiApi.NotFoundError}
     * @throws {@link MixedbreadAiApi.UnprocessableEntityError}
     * @throws {@link MixedbreadAiApi.TooManyRequestsError}
     * @throws {@link MixedbreadAiApi.InternalServerError}
     *
     * @example
     *     await mixedbreadAiApi.reranking({
     *         model: "model",
     *         input: [{
     *                 text: "text"
     *             }],
     *         query: {
     *             text: "text"
     *         },
     *         topK: 10,
     *         returnInput: false
     *     })
     */
    reranking(request: MixedbreadAiApi.RerankingRequest, requestOptions?: MixedbreadAiApiClient.RequestOptions): Promise<MixedbreadAiApi.RerankingResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
