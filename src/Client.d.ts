/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as MixedbreadAI from "./api";
export declare namespace MixedbreadAIClient {
    interface Options {
        environment?: core.Supplier<environments.MixedbreadAIEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class MixedbreadAIClient {
    protected readonly _options: MixedbreadAIClient.Options;
    constructor(_options: MixedbreadAIClient.Options);
    /**
     * Create embeddings for text or images using the specified model, encoding format, and normalization.
     * @throws {@link MixedbreadAI.BadRequestError}
     * @throws {@link MixedbreadAI.UnauthorizedError}
     * @throws {@link MixedbreadAI.ForbiddenError}
     * @throws {@link MixedbreadAI.NotFoundError}
     * @throws {@link MixedbreadAI.UnprocessableEntityError}
     * @throws {@link MixedbreadAI.TooManyRequestsError}
     * @throws {@link MixedbreadAI.InternalServerError}
     *
     * @example
     *     await mixedbreadAi.embeddings({
     *         input: "input",
     *         model: "model"
     *     })
     */
    embeddings(request: MixedbreadAI.EmbeddingsRequest, requestOptions?: MixedbreadAIClient.RequestOptions): Promise<MixedbreadAI.EmbeddingsResponse>;
    /**
     * @throws {@link MixedbreadAI.BadRequestError}
     * @throws {@link MixedbreadAI.UnauthorizedError}
     * @throws {@link MixedbreadAI.ForbiddenError}
     * @throws {@link MixedbreadAI.NotFoundError}
     * @throws {@link MixedbreadAI.UnprocessableEntityError}
     * @throws {@link MixedbreadAI.TooManyRequestsError}
     * @throws {@link MixedbreadAI.InternalServerError}
     *
     * @example
     *     await mixedbreadAi.reranking({
     *         input: [{
     *                 text: "text"
     *             }],
     *         model: "model",
     *         query: {
     *             text: "text"
     *         },
     *         returnInput: false,
     *         topK: 10
     *     })
     */
    reranking(request: MixedbreadAI.RerankingRequest, requestOptions?: MixedbreadAIClient.RequestOptions): Promise<MixedbreadAI.RerankingResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
