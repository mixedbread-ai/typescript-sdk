/* tslint:disable */
/* eslint-disable */
/**
 * mixedbread-ai
 * Discover how to convert text into embeddings with the Embeddings API. Ideal for NLP tasks like text similarity and clustering. Use top open source models or your own fine-tuned models.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmbeddingsRequest
 */
export interface EmbeddingsRequest {
    /**
     * A list of texts for which the embedding should be generated.
     * @type {Array<string>}
     * @memberof EmbeddingsRequest
     */
    texts?: Array<string>;
    /**
     * Specifies the model to be used for generating embeddings.
     * @type {string}
     * @memberof EmbeddingsRequest
     */
    model?: string;
    /**
     * Required only for instruction based models. Specifies the instruction for generating embeddings.
     * @type {string}
     * @memberof EmbeddingsRequest
     */
    instruction?: string;
}

/**
 * Check if a given object implements the EmbeddingsRequest interface.
 */
export function instanceOfEmbeddingsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmbeddingsRequestFromJSON(json: any): EmbeddingsRequest {
    return EmbeddingsRequestFromJSONTyped(json, false);
}

export function EmbeddingsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddingsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'texts': !exists(json, 'texts') ? undefined : json['texts'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'instruction': !exists(json, 'instruction') ? undefined : json['instruction'],
    };
}

export function EmbeddingsRequestToJSON(value?: EmbeddingsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'texts': value.texts,
        'model': value.model,
        'instruction': value.instruction,
    };
}

