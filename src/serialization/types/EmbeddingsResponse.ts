/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as MixedbreadAI from "../../api";
import * as core from "../../core";

export const EmbeddingsResponse: core.serialization.ObjectSchema<
    serializers.EmbeddingsResponse.Raw,
    MixedbreadAI.EmbeddingsResponse
> = core.serialization.object({
    usage: core.serialization.lazyObject(async () => (await import("..")).Usage),
    model: core.serialization.string(),
    data: core.serialization.lazy(async () => (await import("..")).Data),
    object: core.serialization.lazy(async () => (await import("..")).ObjectType).optional(),
    normalized: core.serialization.boolean(),
    encodingFormat: core.serialization.property(
        "encoding_format",
        core.serialization.lazy(async () => (await import("..")).EmbeddingsResponseEncodingFormat)
    ),
    dimensions: core.serialization.number().optional(),
});

export declare namespace EmbeddingsResponse {
    interface Raw {
        usage: serializers.Usage.Raw;
        model: string;
        data: serializers.Data.Raw;
        object?: serializers.ObjectType.Raw | null;
        normalized: boolean;
        encoding_format: serializers.EmbeddingsResponseEncodingFormat.Raw;
        dimensions?: number | null;
    }
}
